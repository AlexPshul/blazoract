@using System.Net.Http
@using MonacoRazor

@inject HttpClient Http

<div class="code-cell">
    <div class="toolbar">
        <button @onclick="RunCell">
            &#x25BA;
        </button>
    </div>
    <CodeEditor @bind-Code="cell.Content" OnCompletionsRequested="GetCompletionsAsync" />
    <div class="break" />

    @* TODO: Create a cleaner system for formatting different kinds of output/status *@
    @if (isEvaluating)
    {
        <div class="output">...</div>
    }
    else if (result != null)
    {
        if (!string.IsNullOrEmpty(result.CommandFailedMessage))
        {
            <div class="output command-failed">@result.CommandFailedMessage</div>
        }
        else if (result.Output != null)
        {
            <div class="output">@result.Output</div>
        }
        else
        {
            <div class="output">(No output)</div>
        }
    }
</div>

@code {
    [Parameter]
    public Cell cell { get; set; }

    private ExecuteResult result;
    private bool isEvaluating;

    private async Task RunCell()
    {
        try
        {
            isEvaluating = true;
            var request = new ExecuteRequest(cell.Content);
            var response = await Http.PostAsJsonAsync("run/evaluatecell", request);
            result = await response.Content.ReadFromJsonAsync<ExecuteResult>();
        }
        finally
        {
            isEvaluating = false;
        }
    }

    private async Task<Suggestion[]> GetCompletionsAsync(string value, Position position)
    {
        var response = await Http.PostAsJsonAsync("run/getcompletions", new GetCompletionsRequest
        {
            Code = value,
            Column = position.Column,
            LineNumber = position.LineNumber
        });

        return await response.Content.ReadFromJsonAsync<Suggestion[]>();
    }
}